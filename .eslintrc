{
  "extends": [
    "amo",
    "plugin:amo/typescript",
    "plugin:jest/recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint",
    "prettier/react"
  ],
  "env": {
    "browser": true,
  },
  "rules": {
    "import/no-extraneous-dependencies": ["error", {
        "devDependencies": [
            "**/*.spec.*",
            "src/@types/**/*",
            "src/setupTests.tsx",
            "src/test-helpers.tsx",
            "**/*.stories.tsx",
            "stories/**/*.tsx"
        ]
      }
    ],
    // We use `.tsx` instead of `.jsx` for files with JSX inside.
    "react/jsx-filename-extension": ["error", {
        "extensions": [".tsx"]
      }
    ],
    // We decided to prefer types over interfaces.
    "@typescript-eslint/prefer-interface": "off",
    "@typescript-eslint/explicit-member-accessibility": "off",
    // This rule conflicts with our convention.
    "jest/valid-describe": "off",
    // Report an error when a variable is not used.
    "@typescript-eslint/no-unused-vars": "error",
    // The beauty of TS is that it infers types quite well, so let's not write
    // too much code.
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "error",
    // See: https://github.com/typescript-eslint/typescript-eslint/issues/2502
    "no-use-before-define": "off",
    "@typescript-eslint/ban-ts-comment": ["error", {
      "ts-expect-error": "allow-with-description"
    }],
    // TODO: re-enable the rule once it gets fixed for TypeScript and enums.
    // See: https://github.com/typescript-eslint/typescript-eslint/issues/325
    "no-shadow": "off",
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".ts", ".tsx"]
      }
    }
  }
}
