# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER - Login user for docker hub
# DOCKER_PASS - Login password for docker hub user
# GH_TOKEN - A valid GitHub token (for Storybook)
version: 2.1

references:
  defaults: &defaults
    working_directory: ~/addons-code-manager
    docker:
      # This is the NodeJS version we run in production.
      - image: circleci/node:12

  defaults-next: &defaults-next
    working_directory: ~/addons-code-manager
    docker:
      # This is the next NodeJS version we will support.
      - image: circleci/node:14

  defaults-release: &defaults-release
    machine: true
    working_directory: ~/addons-code-manager

  restore_build_cache: &restore_build_cache
    restore_cache:
      name: restore yarn package cache
      keys:
        - yarn-packages-{{ checksum "yarn.lock" }}

  run_yarn_install: &run_yarn_install
    run:
      name: install dependencies
      # See: https://github.com/mozilla/addons-frontend/issues/3034
      command: yarn install --pure-lockfile

  save_build_cache: &save_build_cache
    save_cache:
      name: save yarn package cache
      key: yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - ~/.cache/yarn

  restore_next_build_cache: &restore_next_build_cache
    restore_cache:
      name: restore yarn package cache
      keys:
        - next-yarn-packages-{{ checksum "yarn.lock" }}

  save_next_build_cache: &save_next_build_cache
    save_cache:
      name: save yarn package cache
      key: next-yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - ~/.cache/yarn

jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      - run: yarn test-ci
      - run:
          name: yarn serve
          command: |
            yarn build
            yarn serve &
            sleep 30 && kill $! # kill last backgrounded process (a.k.a. the node server)
      - store_artifacts:
          path: coverage

  check:
    <<: *defaults
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      # Make sure we can build a production bundle. This also does type
      # checking.
      - run: yarn build
      # This is a workaround for how `build` does not type check test files.
      # See https://github.com/mozilla/addons-code-manager/issues/33
      - run: yarn typecheck
      - run: yarn type-coverage
      - run: yarn prettier-ci
      - run: yarn lint
      - run: yarn storybook-smoke-test

  test-next:
    <<: *defaults-next
    steps:
      - checkout
      - *restore_next_build_cache
      - *run_yarn_install
      - *save_next_build_cache
      # See: https://support.circleci.com/hc/en-us/articles/360038192673-NodeJS-Builds-or-Test-Suites-Fail-With-ENOMEM-or-a-Timeout
      - run: yarn test --maxWorkers=2

  deploy-storybook:
    <<: *defaults
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      - run: yarn storybook-deploy --ci

  release-tag: # build for the master branch and tags
    <<: *defaults-release
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: sudo apt-get update; sudo apt-get install pigz
      - run: docker info
        # Build the container, using Circle's Docker cache. Only use 1 image per
        # day to keep the cache size down.
      - run:
          name: Build the container ( Next 3 steps )
          command: IMG="image-$(date +%j).gz"; if [[ -e ~/addons-code-manager/docker/$IMG ]]; then echo "Loading $IMG"; pigz -d -c ~/addons-code-manager/docker/$IMG | docker load; fi
      - run: >
          printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n'
          "$CIRCLE_SHA1"
          "$CIRCLE_TAG"
          "$CIRCLE_PROJECT_USERNAME"
          "$CIRCLE_PROJECT_REPONAME"
          "$CIRCLE_BUILD_URL"
          > version.json
      - run:
          name: Build the docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build --pull -t addons-code-manager .
      - run: docker images
      - run:
          name: Write the sha256 sum to an artifact for verification
          command: |
            docker images --no-trunc | awk '/^app/ {print $3}' | sudo tee $CIRCLE_ARTIFACTS/docker-image-shasum256.txt
      - run:
          name: Save new image
          command: |
            mkdir -p ~/addons-code-manager/docker
            IMG="image-$(date +%j).gz"; docker save addons-code-manager | pigz --fast -c > ~/addons-code-manager/docker/$IMG
            ls -l ~/addons-code-manager/docker
      - run:
          name: Push to repo
          command: |
            [ ! -z $DOCKERHUB_REPO ]
            echo $DOCKERHUB_REPO:$CIRCLE_TAG
            docker tag addons-code-manager $DOCKERHUB_REPO:$CIRCLE_TAG
            docker images
            docker push $DOCKERHUB_REPO:$CIRCLE_TAG

  release-master: # build for the master branch and tags
    <<: *defaults-release
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: sudo apt-get update; sudo apt-get install pigz
      - run: docker info
        # Build the container, using Circle's Docker cache. Only use 1 image per
        # day to keep the cache size down.
      - run:
          name: Build the container ( Next 2 steps )
          command: IMG="image-$(date +%j).gz"; if [[ -e ~/addons-code-manager/docker/$IMG ]]; then echo "Loading $IMG"; pigz -d -c ~/addons-code-manager/docker/$IMG | docker load; fi
      - run: >
          printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n'
          "$CIRCLE_SHA1"
          "$CIRCLE_TAG"
          "$CIRCLE_PROJECT_USERNAME"
          "$CIRCLE_PROJECT_REPONAME"
          "$CIRCLE_BUILD_URL"
          > version.json
      - run:
          name: Build the docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build --pull -t addons-code-manager .
      - run: docker images
      - run:
          name: Write the sha256 sum to an artifact for verification
          command: |
            docker images --no-trunc | awk '/^app/ {print $3}' | sudo tee $CIRCLE_ARTIFACTS/docker-image-shasum256.txt
      - run:
          name: Save new image
          command: |
            mkdir -p ~/addons-code-manager/docker
            IMG="image-$(date +%j).gz"; docker save addons-code-manager | pigz --fast -c > ~/addons-code-manager/docker/$IMG
            ls -l ~/addons-code-manager/docker
      - run:
          name: Push to repo
          command: |
            [ ! -z $DOCKERHUB_REPO ]
            docker tag addons-code-manager $DOCKERHUB_REPO:latest
            docker push $DOCKERHUB_REPO:latest

workflows:
  version: 2
  default-workflow:
    jobs:
      - test
      - check
      - test-next
      - deploy-storybook:
          requires:
            - test
            - check
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - release-tag:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-master:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
